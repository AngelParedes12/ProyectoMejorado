@page "/tecnico/ordenes"
@attribute [Authorize(Roles = "Tecnico,Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ProyectoMejorado.Components.Models
@using ProyectoMejorado.Data
@inject UserManager<ApplicationUser> userManager
@inject ApplicationDbContext context
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer

<PageTitle>Órdenes Asignadas</PageTitle>

<div class="container">
    <div class="card shadow-lg rounded-4 p-4">
        <h3 class="text-primary mb-4 text-center">
            <i class="bi bi-wrench-adjustable me-2"></i> Órdenes Asignadas
        </h3>

        @if (ordenes == null)
        {
            <div class="text-center">Cargando órdenes...</div>
        }
        else if (!ordenes.Any())
        {
            <div class="alert alert-info text-center">No tienes órdenes asignadas.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-striped align-middle text-center">
                    <thead class="table-dark">
                        <tr>
                            <th>Cliente</th>
                            <th>Equipo</th>
                            <th>Problema</th>
                            <th>Estado</th>
                            <th>Actualizar Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var orden in ordenes)
                        {
                            <tr>
                                <td>@orden.ClienteNombre</td>
                                <td>@orden.DescripcionEquipo</td>
                                <td>@orden.ProblemaReportado</td>
                                <td>
                                    <span class="badge @(orden.Estado switch
                                    {
                                        "Pendiente" => "bg-warning text-dark",
                                        "En proceso" => "bg-primary",
                                        "Reparado" => "bg-info text-dark",
                                        "Entregado" => "bg-success",
                                        _ => "bg-secondary"
                                    })">@orden.Estado</span>
                                </td>
                                <td>
                                    <InputSelect class="form-select form-select-sm mb-2" @bind-Value="orden.Estado">
                                        <option>Pendiente</option>
                                        <option>En proceso</option>
                                        <option>Reparado</option>
                                        <option>Entregado</option>
                                    </InputSelect>
                                    <button class="btn btn-sm btn-outline-primary w-100" @onclick="() => ActualizarEstado(orden)">
                                        <i class="bi bi-check-circle me-1"></i> Guardar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @claseAlerta mt-4 text-center fw-semibold">@mensaje</div>
        }
    </div>
</div>

@code {
    private List<OrdenReparacion>? ordenes;
    private string mensaje = string.Empty;
    private string claseAlerta = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = await userManager.GetUserAsync(auth.User);

        if (user != null)
        {
            ordenes = await Task.FromResult(
                context.OrdenesReparacion
                .Where(o => o.TecnicoAsignadoId == user.Id)
                .ToList());
        }
    }

    private async Task ActualizarEstado(OrdenReparacion orden)
    {
        try
        {
            context.OrdenesReparacion.Update(orden);
            await context.SaveChangesAsync();
            mensaje = "✅ Estado actualizado correctamente.";
            claseAlerta = "alert-success";
        }
        catch
        {
            mensaje = "❌ Error al actualizar el estado.";
            claseAlerta = "alert-danger";
        }
    }
}
