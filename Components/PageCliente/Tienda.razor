@page "/tienda"
@using ProyectoMejorado.Components.Models
@using ProyectoMejorado.Components.Services
@inject ProductoService productoService
@inject CarritoService carritoService
@inject NavigationManager nav
@rendermode InteractiveServer

<PageTitle>Tienda</PageTitle>

<!-- 🛒 Botón flotante del carrito -->
<div class="position-fixed top-0 end-0 m-4" style="z-index: 1000;">
    <a href="/carrito" class="btn btn-primary position-relative shadow animate-button rounded-pill px-4 py-2">
        <i class="bi bi-cart3 me-2"></i> Carrito
        @if (carritoService.ObtenerCantidadTotal() > 0)
        {
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @carritoService.ObtenerCantidadTotal()
            </span>
        }
    </a>
</div>

<!-- 🔎 Filtro y búsqueda -->
<div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4">
    <input type="text" class="form-control me-md-3 mb-3 mb-md-0 shadow-sm w-100 w-md-50 rounded-3" placeholder="🔍 Buscar producto..." @bind="busqueda" @bind:event="oninput" />

    <select class="form-select shadow-sm w-100 w-md-25 rounded-3" @bind="categoriaSeleccionada">
        <option value="">Todas las categorías</option>
        @foreach (var c in categorias.Distinct())
        {
            <option value="@c">@c</option>
        }
    </select>
</div>

<h3 class="text-center text-primary mb-4"><i class="bi bi-shop-window me-2"></i> Catálogo de Productos</h3>

@if (productosFiltrados is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando productos...</span>
        </div>
    </div>
}
else if (!productosFiltrados.Any())
{
    <div class="alert alert-info text-center">No se encontraron productos.</div>
}
else
{
    <div class="row g-4">
        @foreach (var p in productosFiltrados)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <div class="card h-100 shadow-sm border-0 rounded-4 position-relative @(p.CantidadDisponible == 0 ? "bg-light opacity-75" : "") animate__animated animate__fadeIn">

                    @if (p.CantidadDisponible == 0)
                    {
                        <div class="position-absolute top-0 start-0 bg-danger text-white px-2 py-1 rounded-bottom-end small fw-bold" style="z-index: 1;">
                            Agotado
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(p.ImagenUrl))
                    {
                        <img src="@p.ImagenUrl" class="card-img-top rounded-top-4" style="object-fit: cover; height: 200px;" />
                    }

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-primary">@p.Nombre</h5>
                        <span class="badge bg-light text-dark border mb-2">@p.Categoria</span>
                        <p class="card-text text-muted small">@p.Descripcion</p>

                        <div class="mt-auto">
                            <h5 class="text-success fw-bold">RD$ @p.Precio</h5>
                            <p class="mb-2 small">
                                <strong>Stock:</strong>
                                <span class="badge @(p.CantidadDisponible > 5 ? "bg-success" : p.CantidadDisponible > 0 ? "bg-warning text-dark" : "bg-danger")">
                                    @(p.CantidadDisponible > 0 ? $"{p.CantidadDisponible} disponible" : "Agotado")
                                </span>
                            </p>

                            @if (p.CantidadDisponible > 0)
                            {
                                <button class="btn btn-outline-primary w-100 rounded-pill" @onclick="@(() => AgregarAlCarrito(p))">
                                    <i class="bi bi-cart-plus me-1"></i> Agregar al carrito
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary w-100 rounded-pill" disabled>
                                    <i class="bi bi-x-circle me-1"></i> Sin stock
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @tipoAlerta text-center fw-semibold mt-4">@mensaje</div>
}

@code {
    private List<Producto> productos = new();
    private List<Producto> productosFiltrados = new();
    private string mensaje = "";
    private string tipoAlerta = "alert-success";
    private string busqueda = "";
    private string categoriaSeleccionada = "";
    private List<string> categorias = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await productoService.ObtenerProductos();
        categorias = productos.Select(p => p.Categoria ?? "Sin categoría").Distinct().ToList();
        FiltrarProductos();
    }

    private void AgregarAlCarrito(Producto p)
    {
        carritoService.Agregar(new ItemCarrito
            {
                ProductoId = p.Id,
                Nombre = p.Nombre,
                Precio = p.Precio,
                ImagenUrl = p.ImagenUrl,
                Cantidad = 1
            });

        mensaje = $"✅ '{p.Nombre}' se agregó al carrito.";
        tipoAlerta = "alert-success";
        FiltrarProductos();

        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            mensaje = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void FiltrarProductos()
    {
        productosFiltrados = productos
            .Where(p =>
                (string.IsNullOrEmpty(busqueda) || p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(categoriaSeleccionada) || p.Categoria == categoriaSeleccionada))
            .ToList();
    }

    protected override void OnParametersSet()
    {
        FiltrarProductos();
    }
}
