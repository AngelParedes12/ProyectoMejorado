@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProyectoMejorado.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<PageTitle>Registro de Cliente</PageTitle>

<div class="container d-flex justify-content-center mt-5">
    <div class="card shadow-lg p-4 rounded-4" style="max-width: 500px; width: 100%;">
        <h3 class="text-center text-primary mb-4">
            <i class="bi bi-person-plus-fill me-2"></i> Registro de Cliente
        </h3>

        <StatusMessage Message="@Message" />

        <EditForm Model="Input" OnValidSubmit="RegistrarCliente" FormName="registro">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label class="form-label">Nombre completo</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                    <InputText @bind-Value="Input.NombreCompleto" class="form-control" placeholder="Ej. Juan Pérez" />
                </div>
                <ValidationMessage For="() => Input.NombreCompleto" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Dirección</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-geo-alt-fill"></i></span>
                    <InputText @bind-Value="Input.Direccion" class="form-control" placeholder="Ej. Calle #5, SFM" />
                </div>
                <ValidationMessage For="() => Input.Direccion" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Teléfono</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-telephone-fill"></i></span>
                    <InputText @bind-Value="Input.Telefono" class="form-control" placeholder="Ej. 809-000-0000" />
                </div>
                <ValidationMessage For="() => Input.Telefono" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Correo electrónico</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                    <InputText @bind-Value="Input.Email" class="form-control" placeholder="email@ejemplo.com" />
                </div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                    <InputText @bind-Value="Input.Password" class="form-control" type="password" />
                </div>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Confirmar contraseña</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-check-circle-fill"></i></span>
                    <InputText @bind-Value="Input.ConfirmPassword" class="form-control" type="password" />
                </div>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-success w-100">
                <i class="bi bi-person-check-fill me-1"></i> Registrarse
            </button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(e => e.Description))}";

    public async Task RegistrarCliente(EditContext context)
    {
        var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                NombreCompleto = Input.NombreCompleto,
                Direccion = Input.Direccion,
                Telefono = Input.Telefono
            };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("Cliente registrado exitosamente.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        public string NombreCompleto { get; set; } = "";

        [Required]
        public string Direccion { get; set; } = "";

        [Required]
        [Phone]
        public string Telefono { get; set; } = "";

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Las contraseñas no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
