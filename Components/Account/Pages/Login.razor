@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProyectoMejorado.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor


<PageTitle>Iniciar Sesión</PageTitle>

<div class="container d-flex justify-content-center mt-5">
    <div class="card shadow-lg p-4 rounded-4" style="max-width: 480px; width: 100%;">
        <h3 class="text-center text-primary mb-4">Iniciar Sesión</h3>

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label class="form-label">Correo electrónico</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="ejemplo@email.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="••••••••" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Recordarme</label>
            </div>

            <button type="submit" class="btn btn-primary w-100">Entrar</button>

            <div class="mt-3 text-center">
                <a href="Account/ForgotPassword">¿Olvidaste tu contraseña?</a><br />
                <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">
                    Registrarse como nuevo usuario
                </a><br />
                <a href="Account/ResendEmailConfirmation">Reenviar confirmación</a>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger text-center mt-4">@errorMessage</div>
}

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context != null && HttpMethods.IsGet(context.Request.Method))
        {
            await context.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/"); // ✅ Blazor-safe redirect
        }
        else if (result.RequiresTwoFactor)
        {
            NavigationManager.NavigateTo($"Account/LoginWith2fa?returnUrl={ReturnUrl}&rememberMe={Input.RememberMe}");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            NavigationManager.NavigateTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Credenciales inválidas.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
