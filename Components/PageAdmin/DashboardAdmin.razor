@page "/admin/dashboard"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ProyectoMejorado.Data
@using ProyectoMejorado.Components.Models
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authProvider
@inject UserManager<ApplicationUser> userManager
@rendermode InteractiveServer

<PageTitle>Dashboard Administrador</PageTitle>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <div class="mb-4 bg-white shadow-sm rounded-4 p-4 d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-2"><span class="wave">👋</span> ¡Bienvenido, <span class="text-primary">@usuarioEmail</span>!</h3>
            <p class="text-muted mb-0">Este es tu panel de administración.</p>
        </div>
        <div class="fs-5 text-muted">@DateTime.Now.ToString("dd/MM/yyyy")</div>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="card card-hover border-0 shadow-lg rounded-4 animate-fade-in"
                 @onclick='() => NavigationManager.NavigateTo("/admin/ajustar-stock")' style="cursor:pointer;">
                <div class="card-body text-center">
                    <i class="bi bi-box-seam display-4 text-primary"></i>
                    <h5 class="mt-3">Productos</h5>
                    <p class="fw-bold fs-4">@totalProductos</p>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="card card-hover border-0 shadow-lg rounded-4 animate-fade-in delay-1"
                 @onclick='() => NavigationManager.NavigateTo("/admin/pedidos")' style="cursor:pointer;">
                <div class="card-body text-center">
                    <i class="bi bi-receipt-cutoff display-4 text-success"></i>
                    <h5 class="mt-3">Pedidos</h5>
                    <p class="fw-bold fs-4">@totalPedidos</p>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="card card-hover border-0 shadow-lg rounded-4 animate-fade-in delay-2"
                 @onclick='() => NavigationManager.NavigateTo("/admin/ordenes")' style="cursor:pointer;">
                <div class="card-body text-center">
                    <i class="bi bi-tools display-4 text-warning"></i>
                    <h5 class="mt-3">Órdenes Reparación</h5>
                    <p class="fw-bold fs-4">@totalOrdenes</p>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-3">
            <div class="card card-hover border-0 shadow-lg rounded-4 animate-fade-in delay-3"
                 @onclick='() => NavigationManager.NavigateTo("/admin/usuarios")' style="cursor:pointer;">
                <div class="card-body text-center">
                    <i class="bi bi-people-fill display-4 text-danger"></i>
                    <h5 class="mt-3">Usuarios</h5>
                    <p class="fw-bold fs-4">@totalUsuarios</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card border-0 shadow rounded-4 bg-light p-4">
                <h5 class="text-warning fw-bold mb-3">Producto con menor stock</h5>
                @if (productoMenorStock != null)
                {
                    <p class="mb-0">
                        <strong>
                            <a href="/admin/ajustar-stock" class="text-decoration-none text-dark fw-semibold">
                                @productoMenorStock.Nombre
                            </a>
                        </strong> —
                        <span class="badge bg-warning text-dark">@productoMenorStock.CantidadDisponible unidades</span>
                    </p>
                }
                else
                {
                    <p class="text-muted">No hay productos disponibles.</p>
                }
            </div>
        </div>

        <div class="col-md-6">
            <div class="card border-0 shadow rounded-4 bg-light p-4">
                <h5 class="text-success fw-bold mb-3">Producto más vendido</h5>
                @if (productoMasVendidoNombre != null)
                {
                    <p class="mb-0">
                        <strong>@productoMasVendidoNombre</strong> —
                        <span class="badge bg-success">@productoMasVendidoCantidad unidades</span>
                    </p>
                }
                else
                {
                    <p class="text-muted">No hay ventas registradas.</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private int totalProductos;
    private int totalPedidos;
    private int totalOrdenes;
    private int totalUsuarios;
    private bool isLoading = true;
    private string usuarioEmail = "";

    private Producto? productoMenorStock;
    private string? productoMasVendidoNombre;
    private int productoMasVendidoCantidad;

    protected override async Task OnInitializedAsync()
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = await userManager.GetUserAsync(auth.User);
        usuarioEmail = user?.Email ?? "Administrador";

        totalProductos = context.Productos.Count();
        totalPedidos = context.OrdenesClientes.Count();
        totalOrdenes = context.OrdenesReparacion.Count();
        totalUsuarios = context.Users.Count();

        productoMenorStock = context.Productos
            .OrderBy(p => p.CantidadDisponible)
            .FirstOrDefault();

        var productosVendidos = context.OrdenesClientes
            .AsEnumerable()
            .SelectMany(o => o.Productos.Split(",", StringSplitOptions.RemoveEmptyEntries))
            .Select(p =>
            {
                var partes = p.Trim().Split(" x");
                return new
                {
                    Nombre = partes[0],
                    Cantidad = partes.Length == 2 && int.TryParse(partes[1], out var q) ? q : 0
                };
            })
            .GroupBy(x => x.Nombre)
            .Select(g => new { Nombre = g.Key, Total = g.Sum(x => x.Cantidad) })
            .OrderByDescending(x => x.Total)
            .FirstOrDefault();

        if (productosVendidos != null)
        {
            productoMasVendidoNombre = productosVendidos.Nombre;
            productoMasVendidoCantidad = productosVendidos.Total;
        }

        isLoading = false;
    }
}
