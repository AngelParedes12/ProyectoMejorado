@page "/admin/pedidos"
@attribute [Authorize(Roles = "Admin,Tecnico,Empleado")]
@using Microsoft.AspNetCore.Authorization
@using ProyectoMejorado.Data
@using ProyectoMejorado.Components.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext context
@inject NavigationManager nav
@rendermode InteractiveServer

<PageTitle>Gestión de Pedidos</PageTitle>

<h3 class="text-primary mb-4">
    <i class="bi bi-receipt me-2"></i> Gestión de Pedidos
</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @claseAlerta text-center fw-semibold">@mensaje</div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!pedidos.Any())
{
    <div class="alert alert-info text-center">No hay pedidos registrados.</div>
}
else
{
    <table class="table table-striped table-hover table-bordered">
        <thead class="table-dark text-center">
            <tr>
                <th>Fecha</th>
                <th>Cliente</th>
                <th>Productos</th>
                <th>Total</th>
                <th>Estado</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidos.OrderByDescending(p => p.Fecha))
            {
                <tr class="align-middle">
                    <td>@pedido.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@pedido.ClienteEmail</td>
                    <td>@pedido.Productos</td>
                    <td>RD$ @pedido.Total</td>
                    <td class="text-center">
                        <InputSelect class="form-select form-select-sm" @bind-Value="pedido.Estado" @onchange="async (_) => await CambiarEstado(pedido.Id, pedido.Estado)">
                            <option value="Pendiente">Pendiente</option>
                            <option value="Procesado">Procesado</option>
                            <option value="Enviado">Enviado</option>
                            <option value="Entregado">Entregado</option>
                            <option value="Cancelado">Cancelado</option>
                        </InputSelect>
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => nav.NavigateTo("/mis-pedidos/" + pedido.Id))">
                            <i class="bi bi-eye"></i> Ver Detalle
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<OrdenCliente> pedidos = new();
    private bool isLoading = true;
    private string mensaje = "";
    private string claseAlerta = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
    }

    private async Task CargarPedidos()
    {
        isLoading = true;
        pedidos = await context.OrdenesClientes.ToListAsync();
        isLoading = false;
    }

    private async Task CambiarEstado(int pedidoId, string nuevoEstado)
    {
        try
        {
            var pedidoDb = await context.OrdenesClientes.FirstOrDefaultAsync(p => p.Id == pedidoId);
            if (pedidoDb != null)
            {
                pedidoDb.Estado = nuevoEstado;
                await context.SaveChangesAsync();

                mensaje = $"✅ Estado del pedido actualizado a '{nuevoEstado}'.";
                claseAlerta = "alert-success";

                await CargarPedidos();
            }
        }
        catch
        {
            mensaje = "❌ Ocurrió un error al actualizar el estado.";
            claseAlerta = "alert-danger";
        }

        await Task.Delay(2500);
        mensaje = "";
        await InvokeAsync(StateHasChanged);
    }
}
