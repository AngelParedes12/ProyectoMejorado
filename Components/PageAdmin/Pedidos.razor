@page "/admin/pedidos"
@attribute [Authorize(Roles = "Admin,Tecnico,Empleado")]
@using Microsoft.AspNetCore.Authorization
@using ProyectoMejorado.Data
@using ProyectoMejorado.Components.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext context
@inject NavigationManager nav
@rendermode InteractiveServer

<PageTitle>Gestión de Pedidos</PageTitle>

<h3 class="text-primary mb-4 text-center">
    <i class="bi bi-receipt-cutoff me-2"></i> Gestión de Pedidos
</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @claseAlerta text-center fw-semibold">@mensaje</div>
}

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!pedidos.Any())
{
    <div class="alert alert-info text-center">📦 No hay pedidos registrados aún.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered align-middle shadow-sm rounded-4 overflow-hidden">
            <thead class="table-primary text-center">
                <tr>
                    <th>📅 Fecha</th>
                    <th>👤 Cliente</th>
                    <th>🛍 Productos</th>
                    <th>💰 Total</th>
                    <th>🚚 Estado</th>
                    <th>🔧 Cambiar Estado</th>
                    <th>🔍 Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pedido in pedidos.OrderByDescending(p => p.Fecha))
                {
                    <tr>
                        <td class="text-center">@pedido.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@pedido.ClienteEmail</td>
                        <td class="small">@pedido.Productos</td>
                        <td class="text-end fw-bold text-success">RD$ @pedido.Total</td>
                        <td class="text-center">
                            <span class="badge @GetBadgeColor(pedido.Estado)">
                                @pedido.Estado
                            </span>
                        </td>
                        <td class="text-center">
                            <InputSelect class="form-select form-select-sm text-center border-primary"
                                         style="min-width: 130px;"
                                         @bind-Value="pedido.Estado"
                                         @onchange="async (_) => await CambiarEstado(pedido.Id, pedido.Estado)">
                                <option value="Pendiente">🕒 Pendiente</option>
                                <option value="Procesado">🔄 Procesado</option>
                                <option value="Enviado">🚚 Enviado</option>
                                <option value="Entregado">📦 Entregado</option>
                                <option value="Cancelado">❌ Cancelado</option>
                            </InputSelect>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-outline-secondary btn-sm rounded-pill px-3" title="Ver detalle"
                                    @onclick="@(() => nav.NavigateTo($"/mis-pedidos/{pedido.Id}"))">
                                <i class="bi bi-eye-fill me-1"></i> Detalle
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<OrdenCliente> pedidos = new();
    private bool isLoading = true;
    private string mensaje = "";
    private string claseAlerta = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
    }

    private async Task CargarPedidos()
    {
        isLoading = true;
        pedidos = await context.OrdenesClientes.ToListAsync();
        isLoading = false;
    }

    private async Task CambiarEstado(int pedidoId, string nuevoEstado)
    {
        try
        {
            var pedidoDb = await context.OrdenesClientes.FirstOrDefaultAsync(p => p.Id == pedidoId);
            if (pedidoDb != null)
            {
                pedidoDb.Estado = nuevoEstado;
                await context.SaveChangesAsync();

                mensaje = $"✅ Estado del pedido actualizado a '{nuevoEstado}'.";
                claseAlerta = "alert-success";

                await CargarPedidos();
            }
        }
        catch
        {
            mensaje = "❌ Ocurrió un error al actualizar el estado.";
            claseAlerta = "alert-danger";
        }

        await Task.Delay(2500);
        mensaje = "";
        await InvokeAsync(StateHasChanged);
    }

    private string GetBadgeColor(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-secondary",
            "Procesado" => "bg-warning text-dark",
            "Enviado" => "bg-info text-dark",
            "Entregado" => "bg-success",
            "Cancelado" => "bg-danger",
            _ => "bg-light text-dark"
        };
    }
}
