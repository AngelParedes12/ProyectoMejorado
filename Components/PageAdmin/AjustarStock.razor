@page "/admin/ajustar-stock"
@attribute [Authorize(Roles = "Admin,Empleado")]
@using Microsoft.AspNetCore.Authorization
@using ProyectoMejorado.Components.Models
@using ProyectoMejorado.Components.Services
@inject ProductoService productoService
@rendermode InteractiveServer

<h3 class="text-primary mb-4"><i class="bi bi-boxes me-2"></i> Ajustar Stock de Productos</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @claseAlerta text-center fw-semibold">@mensaje</div>
}

@if (productos is null)
{
    <div class="text-center">Cargando productos...</div>
}
else if (!productos.Any())
{
    <div class="alert alert-warning text-center">No hay productos registrados aún.</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Producto</th>
                <th>Stock Actual</th>
                <th>Sumar Stock</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in productos)
            {
                <tr>
                    <td>@p.Nombre</td>
                    <td>@p.CantidadDisponible</td>
                    <td style="width: 150px;">
                        <InputNumber class="form-control" @bind-Value="p.StockExtra" Min="1" />
                    </td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="() => AumentarStock(p)">
                            <i class="bi bi-plus-circle me-1"></i> Aumentar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Producto>? productos;
    private string mensaje = "";
    private string claseAlerta = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        productos = await productoService.ObtenerProductos();
        foreach (var p in productos)
        {
            p.StockExtra = 1; // Valor por defecto
        }
    }

    private async Task AumentarStock(Producto producto)
    {
        try
        {
            if (producto.StockExtra < 1)
            {
                mensaje = "❌ Ingresa una cantidad válida para aumentar el stock.";
                claseAlerta = "alert-warning";
                return;
            }

            producto.CantidadDisponible += producto.StockExtra;
            await productoService.ActualizarProducto(producto);

            mensaje = $"✅ Stock de '{producto.Nombre}' actualizado correctamente.";
            claseAlerta = "alert-success";
        }
        catch
        {
            mensaje = "❌ Error al actualizar el stock.";
            claseAlerta = "alert-danger";
        }

        await Task.Delay(2500);
        mensaje = "";
        await InvokeAsync(StateHasChanged);
    }


}

